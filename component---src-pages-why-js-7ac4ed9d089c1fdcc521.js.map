{"version":3,"sources":["webpack:///./src/pages/why.js","webpack:///./node_modules/styled-icons/fa-brands/Twitter/Twitter.esm.js","webpack:///./node_modules/styled-icons/typicons/Heart/Heart.esm.js","webpack:///./src/components/contributors.js"],"names":["WhyPage","invertHeader","hideSearch","title","description","className","href","target","rel","Twitter","props","ref","iconAttrs","iconVerticalAlign","iconViewBox","fill","d","key","displayName","Heart","data","helpers","allContributorsJson","size","map","person","name","replace","twitter"],"mappings":"0FAAA,sDAuGeA,UAjGC,kBACd,kBAAC,IAAD,CAAQC,cAAc,EAAMC,YAAY,GACtC,kBAAC,IAAD,CACEC,MAAM,oBACNC,YAAY,mCAGd,yBAAKC,UAAU,gCACb,wBAAIA,UAAU,YAAd,sCACA,yBAAKA,UAAU,YACf,uBAAGA,UAAU,cAAb,6BAEE,uBACEC,KAAK,0BACLC,OAAO,SACPC,IAAI,uBAHN,iBAFF,2BAS2B,IACzB,uBAAGF,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAlD,WAVF,2SAmBA,wBAAIH,UAAU,mBACZ,6IAIA,oHAIA,uIAIA,+JAEgE,KAEhE,4GAES,IACP,uBAAGC,KAAK,kCAAR,iCAHF,IAMI,MAIN,0OAG0E,KAG1E,wBAAID,UAAU,mCAAd,gBACA,4DACA,wBAAIA,UAAU,mBACZ,oJAIA,8HAIA,gKAMF,8HAE2B,IACzB,uBACEC,KAAK,0KACLC,OAAO,SACPC,IAAI,uBAHN,mBAMK,IATP,kCAaA,kBAAC,IAAD,U,wYC/FKC,EAAU,cAAiB,SAAUC,EAAOC,GAKrD,OAAO,gBAAoB,IAAgB,YAAS,CAClDC,UALU,CACV,KAAQ,eACR,MAAS,8BAITC,kBAAmB,UACnBC,YAAa,eACZJ,EAAO,CACRC,IAAKA,IACH,gBAAoB,OAAQ,CAC9BI,KAAM,eACNC,EAAG,0xBACHC,IAAK,WAGTR,EAAQS,YAAc,UACf,IClBIC,EAAQ,cAAiB,SAAUT,EAAOC,GAKnD,OAAO,gBAAoB,IAAgB,YAAS,CAClDC,UALU,CACV,KAAQ,eACR,MAAS,8BAITC,kBAAmB,SACnBC,YAAa,aACZJ,EAAO,CACRC,IAAKA,IACH,gBAAoB,OAAQ,CAC9BK,EAAG,yIACHC,IAAK,WAGTE,EAAMD,YAAc,QACb,I,SCbQ,eACb,IAAIE,EAAI,OAcR,OAFAA,EAAOC,UAAgBD,EAAKE,qBAG1B,oCACE,wBAAIjB,UAAU,wBAAd,MACK,kBAACc,EAAD,CAAOI,KAAK,SADjB,UAGA,0GAKA,wBAAIlB,UAAU,mBACXe,EAAKI,KAAI,SAAAC,GAAM,OACd,wBAAIpB,UAAU,OAAOY,IAAKQ,EAAOC,KAAKC,QAAQ,IAAK,KAChDF,EAAOC,KAAM,IACbD,EAAOG,SACN,uBACEtB,KAAI,uBAAyBmB,EAAOG,QACpCrB,OAAO,SACPC,IAAI,sBACJH,UAAU,kBAEV,kBAACI,EAAD,CAASc,KAAK,OACd,kCAAQE,EAAOG","file":"component---src-pages-why-js-7ac4ed9d089c1fdcc521.js","sourcesContent":["import React from 'react'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Contributors from '../components/contributors'\n\nconst WhyPage = () => (\n  <Layout invertHeader={true} hideSearch={true}>\n    <SEO\n      title='Why we built this'\n      description='Why we built SMTP Field Manual'\n    />\n\n    <div className='container u-push-top content'>\n      <h2 className='u-center'>Why we built the SMTP Field Manual</h2>\n      <div className='divider'></div>\n      <p className='u-push-top'>\n        We've been sending email (\n        <a\n          href='https://postmarkapp.com'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          as a provider\n        </a>\n        ) for nearly 16 years at{' '}\n        <a href='https://wildbit.com' target='_blank' rel='noopener noreferrer'>\n          Wildbit\n        </a>\n        . Arguably the most confusing aspects of email delivery is bounce\n        management and SMTP response codes. If you're unfamiliar, ISPs (like\n        Gmail, Office 365) will send SMTP responses back about the success or\n        failure of the messages you send. We want to document these responses\n        for several reasons:\n      </p>\n      <ul className='columns-diamond'>\n        <li>\n          SMTP response codes vary wildly across ISPs. A 550 might mean\n          something different depending on who you email.\n        </li>\n        <li>\n          SMTP response codes are constantly changing. It's extremely hard to\n          keep up with it.\n        </li>\n        <li>\n          Advice on what to do with a specific response varies. Should this be a\n          hard bounce, soft bounce, block?\n        </li>\n        <li>\n          The information that comes from SMTP codes can be very telling for\n          deliverability, yet most email services bury the information.{' '}\n        </li>\n        <li>\n          Even ISPs themselves don’t document all of these responses. A favorite\n          is the{' '}\n          <a href='/provider/gmail#code_550_5_7_1'>\n            Gmail low reputation response\n          </a>\n          .{' '}\n        </li>\n      </ul>\n\n      <p>\n        With these reasons in mind, we wanted to create a single resource to\n        document the SMTP codes that exist for the major ISPs. And even\n        more important, ask for help from the industry to keep them up to date.{' '}\n      </p>\n\n      <h3 className='response-list-header u-push-top'>Who it’s for</h3>\n      <p>This resource is perfect for:</p>\n      <ul className='columns-diamond'>\n        <li>\n          Customer Support – Make sense of that bounce message so you can tell\n          your customer what happened, and how to fix it.\n        </li>\n        <li>\n          Email Server Administrators – Follow best practices to standardize\n          SMTP responses across ISPs.\n        </li>\n        <li>\n          Email Deliverability Teams – Keep up to date on changes to SMTP\n          responses, what they mean, and help contribute to the resource.\n        </li>\n      </ul>\n\n      <p>\n        We hope this becomes a valuable resource for anyone who relies on email\n        delivery. Please help us{' '}\n        <a\n          href='https://twitter.com/intent/tweet?url=https://smtpfieldmanual.com&text=See%20raw%20SMTP%20responses%20from%20major%20email%20providers%20and%20spam%20filter%20services.'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          spread the word\n        </a>{' '}\n        to make it even more valuable.\n      </p>\n\n      <Contributors />\n    </div>\n  </Layout>\n)\n\nexport default WhyPage\n","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { StyledIconBase } from '../../StyledIconBase';\nexport var Twitter = React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return React.createElement(StyledIconBase, __assign({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"-.125em\",\n    iconViewBox: \"0 0 512 512\"\n  }, props, {\n    ref: ref\n  }), React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\",\n    key: \"k0\"\n  }));\n});\nTwitter.displayName = 'Twitter';\nexport var TwitterDimensions = {\n  height: undefined,\n  width: undefined\n};","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { StyledIconBase } from '../../StyledIconBase';\nexport var Heart = React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return React.createElement(StyledIconBase, __assign({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), React.createElement(\"path\", {\n    d: \"M12 10.375a4.375 4.375 0 00-8.75 0c0 1.127.159 2.784 1.75 4.375L12 20s5.409-3.659 7-5.25 1.75-3.248 1.75-4.375a4.375 4.375 0 00-8.75 0\",\n    key: \"k0\"\n  }));\n});\nHeart.displayName = 'Heart';\nexport var HeartDimensions = {\n  height: 24,\n  width: 24\n};","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Twitter } from 'styled-icons/fa-brands/Twitter'\nimport { Heart } from 'styled-icons/typicons/Heart'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let data = useStaticQuery(graphql`\n    {\n      allContributorsJson {\n        edges {\n          node {\n            name\n            twitter\n          }\n        }\n      }\n    }\n  `)\n  data = helpers.flatten(data.allContributorsJson)\n\n  return (\n    <>\n      <h3 className='response-list-header'>\n        We <Heart size='22px' /> email\n      </h3>\n      <p>\n        Thanks to all the fine folks who have contributed to the SMTP Field\n        Manual.\n      </p>\n\n      <ul className='columns-diamond'>\n        {data.map(person => (\n          <li className='slim' key={person.name.replace(' ', '')}>\n            {person.name}{' '}\n            {person.twitter && (\n              <a\n                href={`https://twitter.com/${person.twitter}`}\n                target='_blank'\n                rel='noopener noreferrer'\n                className='twitter-handle'\n              >\n                <Twitter size='12' />\n                <span>@{person.twitter}</span>\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n"],"sourceRoot":""}