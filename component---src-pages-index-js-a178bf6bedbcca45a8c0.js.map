{"version":3,"sources":["webpack:///./src/components/spamFilterList.js","webpack:///./src/pages/index.js","webpack:///./node_modules/styled-icons/fa-brands/Twitter/Twitter.esm.js","webpack:///./node_modules/styled-icons/typicons/Heart/Heart.esm.js","webpack:///./src/components/contributors.js","webpack:///./src/components/providerList.js","webpack:///./src/components/codeList.js"],"names":["spamFilters","helpers","allSpamFiltersJson","orderBy","o","name","toLowerCase","className","map","provider","key","id","to","IndexPage","hideSearch","description","indices","algoliaIndices","href","rel","target","updateOnScroll","Twitter","props","ref","iconAttrs","iconVerticalAlign","iconViewBox","fill","d","displayName","Heart","data","allContributorsJson","size","person","replace","twitter","providers","allEmailProvidersJson","codes","allCodesJson","reply","filterByCategory","code","renderCode","category","filter","startsWith"],"mappings":"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","file":"component---src-pages-index-js-a178bf6bedbcca45a8c0.js","sourcesContent":["import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let spamFilters = useStaticQuery(graphql`\n    query getAllSpamFilters {\n      allSpamFiltersJson {\n        edges {\n          node {\n            name\n            id\n            slug\n          }\n        }\n      }\n    }\n  `)\n  spamFilters = helpers.flatten(spamFilters.allSpamFiltersJson)\n  spamFilters = orderBy(spamFilters, [o => o.name.toLowerCase()])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>Spam filters</h3>\n      </div>\n      <div className='list-section_content'>\n        <p>View SMTP responses for a specific spam filter service.</p>\n\n        <ul className='columns-3 columns-diamond'>\n          {spamFilters.map(provider => (\n            <li key={provider.id}>\n              <Link to={`/spamfilter/${provider.id}`}>{provider.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Search from '../components/search'\nimport ProviderList from '../components/providerList'\nimport SpamFilterList from '../components/spamFilterList'\nimport CodeList from '../components/codeList'\nimport DividerGlitch from '../components/dividerGlitch'\nimport Contributors from '../components/contributors'\nimport { algoliaIndices } from '../utils/algoliaIndices'\n\nconst IndexPage = () => {\n  return (\n    <Layout hideSearch={true}>\n      <SEO description='A collection of raw SMTP responses spotted in the wild.' />\n\n      <div className='hero'>\n        <div className='hero_container'>\n          <h2 className='hero_title'>\n            A collection of raw SMTP responses spotted in the wild\n          </h2>\n          <p className='hero_description'>\n            Find a specific SMTP code or email provider\n          </p>\n          <div className='hero_search'>\n            <Search indices={algoliaIndices} />\n          </div>\n          <p className='hero_postmark'>\n            Brought to you by <span className='hero_postmark-icon'></span>\n            <a\n              href='https://postmarkapp.com'\n              rel='noopener noreferrer'\n              target='_blank'\n              className='hero_postmark-link'\n            >\n              Postmark\n            </a>\n            .{' '}\n            <Link to='/why' className='hero_postmark-link'>\n              Why we built this &rarr;\n            </Link>\n          </p>\n        </div>\n      </div>\n      <DividerGlitch updateOnScroll={true} />\n\n      <div className='container-index'>\n        <div id='codes' className='u-push-top'>\n          <CodeList />\n        </div>\n\n        <div className='divider'></div>\n\n        <div id='providers'>\n          <ProviderList />\n        </div>\n\n        <div className='divider'></div>\n\n        <div id='spamfilters'>\n          <SpamFilterList />\n        </div>\n\n        <div className='divider'></div>\n\n        <section className='list-section u-push-top'>\n          <div className='list-section_title'>\n            <h3>SMTP Field Manual</h3>\n          </div>\n          <div className='list-section_content'>\n            <p>\n              The SMTP field manual is a collection of raw STMP server responses\n              from major email service providers. Itâ€™s open source so anyone\n              make contributions. Even you! See something interesting from an\n              email service provider or simply have a suggestion?{' '}\n              <Link to='/contribute'>Let us know</Link>.\n            </p>\n            <p>\n              <Link to='/why'>Why we built this &rarr;</Link>\n            </p>\n          </div>\n        </section>\n      </div>\n    </Layout>\n  )\n}\nexport default IndexPage\n","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { StyledIconBase } from '../../StyledIconBase';\nexport var Twitter = React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return React.createElement(StyledIconBase, __assign({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"-.125em\",\n    iconViewBox: \"0 0 512 512\"\n  }, props, {\n    ref: ref\n  }), React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\",\n    key: \"k0\"\n  }));\n});\nTwitter.displayName = 'Twitter';\nexport var TwitterDimensions = {\n  height: undefined,\n  width: undefined\n};","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { StyledIconBase } from '../../StyledIconBase';\nexport var Heart = React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return React.createElement(StyledIconBase, __assign({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), React.createElement(\"path\", {\n    d: \"M12 10.375a4.375 4.375 0 00-8.75 0c0 1.127.159 2.784 1.75 4.375L12 20s5.409-3.659 7-5.25 1.75-3.248 1.75-4.375a4.375 4.375 0 00-8.75 0\",\n    key: \"k0\"\n  }));\n});\nHeart.displayName = 'Heart';\nexport var HeartDimensions = {\n  height: 24,\n  width: 24\n};","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { Twitter } from 'styled-icons/fa-brands/Twitter'\nimport { Heart } from 'styled-icons/typicons/Heart'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let data = useStaticQuery(graphql`\n    {\n      allContributorsJson {\n        edges {\n          node {\n            name\n            twitter\n          }\n        }\n      }\n    }\n  `)\n  data = helpers.flatten(data.allContributorsJson)\n\n  return (\n    <>\n      <h3 className='response-list-header'>\n        We <Heart size='22px' /> email\n      </h3>\n      <p>\n        Thanks to all the fine folks who have contributed to the SMTP Field\n        Manual.\n      </p>\n\n      <ul className='columns-diamond'>\n        {data.map(person => (\n          <li className='slim' key={person.name.replace(' ', '')}>\n            {person.name}{' '}\n            {person.twitter && (\n              <a\n                href={`https://twitter.com/${person.twitter}`}\n                target='_blank'\n                rel='noopener noreferrer'\n                className='twitter-handle'\n              >\n                <Twitter size='12' />\n                <span>@{person.twitter}</span>\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let providers = useStaticQuery(graphql`\n    query getAllEmailProviders {\n      allEmailProvidersJson {\n        edges {\n          node {\n            name\n            id\n            slug\n          }\n        }\n      }\n    }\n  `)\n  providers = helpers.flatten(providers.allEmailProvidersJson)\n  providers = orderBy(providers, [o => o.name.toLowerCase()])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>Email providers</h3>\n      </div>\n      <div className='list-section_content'>\n        <p>View SMTP responses for a specific email service provider.</p>\n\n        <ul className='columns-3 columns-diamond'>\n          {providers.map(provider => (\n            <li key={provider.id}>\n              <Link to={`/provider/${provider.id}`}>{provider.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy, filter, startsWith } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let codes = useStaticQuery(graphql`\n    {\n      allCodesJson {\n        edges {\n          node {\n            id\n            description\n            reply\n            slug\n          }\n        }\n      }\n    }\n  `)\n  codes = helpers.flatten(codes.allCodesJson)\n  codes = orderBy(codes, [o => o.reply])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>SMTP codes</h3>\n      </div>\n\n      <div className='list-section_content'>\n        <h4 className='code-title'>4.X.X Persistent transient failure</h4>\n        <p>\n          The mail server encountered a temporary failure. If the command is\n          repeated without any change, it might be completed. Mail servers can\n          use temporary failures like this to keep untrusted senders at bay.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 4).map(code => renderCode(code))}\n        </ul>\n\n        <h4 className='code-title u-push-top'>5.X.X permanent error</h4>\n        <p>\n          The mail server has encounted a permanent error. These errors will\n          result in the SMTP connection being dropped. Re-sending will usually\n          produce the same result.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 5).map(code => renderCode(code))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n\nconst filterByCategory = (codes, category) =>\n  filter(codes, code => startsWith(code.reply, category))\n\nconst renderCode = code => (\n  <li key={code.reply}>\n    <Link to={`/code/${code.reply}`}>{code.reply}</Link>\n  </li>\n)\n"],"sourceRoot":""}