{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/providerList.js","webpack:///./src/components/codeList.js"],"names":["IndexPage","hideSearch","title","className","indices","algoliaIndices","href","rel","target","updateOnScroll","id","to","providers","helpers","allEmailProvidersJson","orderBy","o","name","toLowerCase","map","provider","key","codes","allCodesJson","reply","filterByCategory","code","renderCode","category","filter","startsWith"],"mappings":"0FAAA,kGA2EeA,UAhEG,WAChB,OACE,kBAAC,IAAD,CAAQC,YAAY,GAClB,kBAAC,IAAD,CAAKC,MAAM,sBAEX,yBAAKC,UAAU,QACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,cAAd,0DAGA,uBAAGA,UAAU,oBAAb,+CAGA,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAQC,QAASC,OAEnB,uBAAGF,UAAU,iBAAb,qBACoB,0BAAMA,UAAU,uBAClC,uBACEG,KAAK,0BACLC,IAAI,sBACJC,OAAO,SACPL,UAAU,sBAJZ,eAWN,kBAAC,IAAD,CAAeM,gBAAgB,IAE/B,yBAAKN,UAAU,mBACb,yBAAKO,GAAG,QAAQP,UAAU,cACxB,kBAAC,IAAD,OAGF,yBAAKA,UAAU,YAEf,yBAAKO,GAAG,aACN,kBAAC,IAAD,OAGF,yBAAKP,UAAU,YAEf,6BAASA,UAAU,2BACjB,yBAAKA,UAAU,sBACb,kDAEF,yBAAKA,UAAU,wBACb,qSAMA,2BACE,kBAAC,IAAD,CAAMQ,GAAI,eAAV,uB,8FC7DC,eACb,IAAIC,EAAS,OAgBb,OAHAA,EAAYC,UAAgBD,EAAUE,uBACtCF,EAAYG,kBAAQH,EAAW,CAAC,SAAAI,GAAC,OAAIA,EAAEC,KAAKC,iBAG1C,6BAASf,UAAU,gBACjB,yBAAKA,UAAU,sBACb,gDAEF,yBAAKA,UAAU,wBACb,6GAKA,wBAAIA,UAAU,6BACXS,EAAUO,KAAI,SAAAC,GAAQ,OACrB,wBAAIC,IAAKD,EAASV,IAChB,kBAAC,IAAD,CAAMC,GAAE,aAAeS,EAASV,IAAOU,EAASH,e,mrBC/B/C,eACb,IAAIK,EAAK,OAiBT,OAHAA,EAAQT,UAAgBS,EAAMC,cAC9BD,EAAQP,kBAAQO,EAAO,CAAC,SAAAN,GAAC,OAAIA,EAAEQ,SAG7B,6BAASrB,UAAU,gBACjB,yBAAKA,UAAU,sBACb,2CAGF,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,cAAd,sCACA,yOAMA,wBAAIA,UAAU,6BACXsB,EAAiBH,EAAO,GAAGH,KAAI,SAAAO,GAAI,OAAIC,EAAWD,OAGrD,wBAAIvB,UAAU,yBAAd,yBACA,+LAMA,wBAAIA,UAAU,6BACXsB,EAAiBH,EAAO,GAAGH,KAAI,SAAAO,GAAI,OAAIC,EAAWD,UAO7D,IAAMD,EAAmB,SAACH,EAAOM,GAAR,OACvBC,iBAAOP,GAAO,SAAAI,GAAI,OAAII,qBAAWJ,EAAKF,MAAOI,OAEzCD,EAAa,SAAAD,GAAI,OACrB,wBAAIL,IAAKK,EAAKF,OACZ,kBAAC,IAAD,CAAMb,GAAE,SAAWe,EAAKF,OAAUE,EAAKF,U","file":"component---src-pages-index-js-6d30eedd9d03e219662c.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Search from '../components/search'\nimport ProviderList from '../components/providerList'\nimport CodeList from '../components/codeList'\nimport DividerGlitch from '../components/dividerGlitch'\nimport { algoliaIndices } from '../utils/algoliaIndices'\n\nconst IndexPage = () => {\n  return (\n    <Layout hideSearch={true}>\n      <SEO title='SMTP Field Manual' />\n\n      <div className='hero'>\n        <div className='hero_container'>\n          <h2 className='hero_title'>\n            A collection of raw SMTP responses spotted in the wild\n          </h2>\n          <p className='hero_description'>\n            Find a specific SMTP code or email provider\n          </p>\n          <div className='hero_search'>\n            <Search indices={algoliaIndices} />\n          </div>\n          <p className='hero_postmark'>\n            Brought to you by <span className='hero_postmark-icon'></span>\n            <a\n              href='https://postmarkapp.com'\n              rel='noopener noreferrer'\n              target='_blank'\n              className='hero_postmark-link'\n            >\n              Postmark\n            </a>\n          </p>\n        </div>\n      </div>\n      <DividerGlitch updateOnScroll={true} />\n\n      <div className='container-index'>\n        <div id='codes' className='u-push-top'>\n          <CodeList />\n        </div>\n\n        <div className='divider'></div>\n\n        <div id='providers'>\n          <ProviderList />\n        </div>\n\n        <div className='divider'></div>\n\n        <section className='list-section u-push-top'>\n          <div className='list-section_title'>\n            <h3>SMTP Field Manual</h3>\n          </div>\n          <div className='list-section_content'>\n            <p>\n              The SMTP field manual is a collection of raw STMP server responses\n              from major email service providers. Itâ€™s all open source so anyone\n              make contributions. Even you! See something interesting from an\n              email service provider or simply have a suggestion? Let us know.\n            </p>\n            <p>\n              <Link to={'/contribute'}>Contribute &rarr;</Link>\n            </p>\n          </div>\n        </section>\n      </div>\n    </Layout>\n  )\n}\nexport default IndexPage\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let providers = useStaticQuery(graphql`\n    query Something {\n      allEmailProvidersJson {\n        edges {\n          node {\n            name\n            id\n            slug\n          }\n        }\n      }\n    }\n  `)\n  providers = helpers.flatten(providers.allEmailProvidersJson)\n  providers = orderBy(providers, [o => o.name.toLowerCase()])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>Email providers</h3>\n      </div>\n      <div className='list-section_content'>\n        <p>\n          See all of the collected SMTP responses for a specific email service\n          provider.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {providers.map(provider => (\n            <li key={provider.id}>\n              <Link to={`/provider/${provider.id}`}>{provider.name}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport { orderBy, filter, startsWith } from 'lodash'\n\nimport * as helpers from '../utils/helpers'\n\nexport default () => {\n  let codes = useStaticQuery(graphql`\n    {\n      allCodesJson {\n        edges {\n          node {\n            id\n            description\n            reply\n            slug\n          }\n        }\n      }\n    }\n  `)\n  codes = helpers.flatten(codes.allCodesJson)\n  codes = orderBy(codes, [o => o.reply])\n\n  return (\n    <section className='list-section'>\n      <div className='list-section_title'>\n        <h3>SMTP codes</h3>\n      </div>\n\n      <div className='list-section_content'>\n        <h4 className='code-title'>4.X.X Persistent transient failure</h4>\n        <p>\n          The mail server encountered a temporary failure. If the command is\n          repeated without any change, it might be completed. Mail servers can\n          use temporary failures like this to keep untrusted senders at bay.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 4).map(code => renderCode(code))}\n        </ul>\n\n        <h4 className='code-title u-push-top'>5.X.X permanent error</h4>\n        <p>\n          The mail server has encounted a permanent error. These errors will\n          result in the SMTP connection being dropped. Re-sending will usually\n          produce the same result.\n        </p>\n\n        <ul className='columns-3 columns-diamond'>\n          {filterByCategory(codes, 5).map(code => renderCode(code))}\n        </ul>\n      </div>\n    </section>\n  )\n}\n\nconst filterByCategory = (codes, category) =>\n  filter(codes, code => startsWith(code.reply, category))\n\nconst renderCode = code => (\n  <li key={code.reply}>\n    <Link to={`/code/${code.reply}`}>{code.reply}</Link>\n  </li>\n)\n"],"sourceRoot":""}